import sys
import os
from PIL import Image
import torch
import torch.nn as nn
from torchvision import transforms
import matplotlib.pyplot as plt
import streamlit as st

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å–≤–µ—Ä—Ç–æ—á–Ω–æ–π —Å–µ—Ç–∏ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –≤ –æ–±—É—á–µ–Ω–∏–∏)
class SimpleCNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(3, 16, 3),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(2),

            nn.Conv2d(16, 32, 3),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(2),

            nn.Conv2d(32, 64, 3),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(2),
        )

        #–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
        with torch.no_grad():
            x = torch.zeros(1, 3, 100, 100)
            x = self.conv(x)
            n_size = x.view(1, -1).size(1)

        self.fc = nn.Sequential(
            nn.Flatten(),
            nn.Linear(n_size, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
        )

    def forward(self, x):
        x = self.conv(x)
        x = self.fc(x)
        return x

#–°–∏–∞–º—Å–∫–∞—è —Å–µ—Ç—å: 2 —Ä–∞–∑–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ CNN, –≤—ã–≤–æ–¥—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
class SiameseNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        self.cnn = SimpleCNN()
    def forward(self, x1, x2):
        out1 = self.cnn(x1)
        out2 = self.cnn(x2)
        return out1, out2

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def is_same(model, img_path1, img_path2, transform, device, threshold=0.5):
    model.eval()
    img1 = transform(Image.open(img_path1).convert('RGB')).unsqueeze(0).to(device)
    img2 = transform(Image.open(img_path2).convert('RGB')).unsqueeze(0).to(device)
    with torch.no_grad():
        out1, out2 = model(img1, img2)
        dist = nn.functional.pairwise_distance(out1, out2)
        print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {dist.item():.4f}")
        return dist.item() < threshold, dist.item()

#–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def main(img_path1, img_path2, threshold=0.5):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    transform = transforms.Compose([
        transforms.Resize((100, 100)),
        transforms.ToTensor(),
    ])

    #–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model = SiameseNetwork().to(device)
    model.load_state_dict(torch.load("siamese_model4.pth", map_location=device))
    same, distance = is_same(model, img_path1, img_path2, transform, device, threshold)
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏? {'–î–∞' if same else '–ù–µ—Ç'}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={distance:.4f}")
    fig, axs = plt.subplots(1, 2, figsize=(8, 4))
    axs[0].imshow(Image.open(img_path1))
    axs[0].set_title("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1")
    axs[0].axis('off')
    axs[1].imshow(Image.open(img_path2))
    axs[1].set_title("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2")
    axs[1].axis('off')
    st.write(f"–ü–æ—Ö–æ–∂–∏–µ: {'–î–∞' if same else '–ù–µ—Ç'} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={distance:.4f})")
    plt.suptitle(f"–ü–æ—Ö–æ–∂–∏–µ: {'–î–∞' if same else '–ù–µ—Ç'} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={distance:.4f})")
    plt.show()

def run_site():
    st.set_page_config(page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ", layout="centered")
    st.title("üì∑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—Ö–æ–∂–∏ –ª–∏ –æ–Ω–∏ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞.")

    uploaded_file1 = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"], key="img1")
    uploaded_file2 = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"], key="img2")

    threshold = st.slider("–ü–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–µ—Å—Ç–∏", 0.0, 2.0, 0.5, step=0.01)

    if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
        if not uploaded_file1 or not uploaded_file2:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            with open("temp1.jpg", "wb") as f:
                f.write(uploaded_file1.getbuffer())
            with open("temp2.jpg", "wb") as f:
                f.write(uploaded_file2.getbuffer())

            main("temp1.jpg", "temp2.jpg", threshold)

            col1, col2 = st.columns(2)
            col1.image(uploaded_file1, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1", use_container_width=True)
            col2.image(uploaded_file2, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2", use_container_width=True)
    

if __name__ == "__main__":
    #if len(sys.argv) < 2 or sys.argv[1] != "gui":
        #if len(sys.argv) < 3:
        #    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python compare.py <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é1> <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é2> [–ø–æ—Ä–æ–≥]")
        #    sys.exit(1)
        #img1 = sys.argv[1]
        #img2 = sys.argv[2]
       # thr = float(sys.argv[3]) if len(sys.argv) > 3 else 0.5
        #if not (os.path.isfile(img1) and os.path.isfile(img2)):
        #    print("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.")
       #     sys.exit(1)
       # main(img1, img2, thr)
    #else:
        # –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ GUI (Streamlit)
        run_site()

